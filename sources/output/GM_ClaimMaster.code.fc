#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "GM_ClaimMaster.headers.fc";
#include "GM_ClaimMaster.stdlib.fc";
#include "GM_ClaimMaster.storage.fc";

;;
;; Contract ClaimMaster functions
;;

(slice, int, slice, slice, int, int, int) $ClaimMaster$_contract_init(slice $minter, slice $admin) impure inline_ref {
    var (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)) = (null(), 86400, null(), null(), 300000000, 150000000, 5000000);
    $self'minter = $minter;
    $self'admin = $admin;
    return ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward);
}

((slice, int, slice, slice, int, int, int), slice) $ClaimMaster$_fun_get_user_address((slice, int, slice, slice, int, int, int) $self, slice $user) impure inline {
    var (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)) = $self;
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), $global_contractAddress($ClaimChild$_init_child(__tact_context_sys, my_address(), $user)));
}

((slice, int, slice, slice, int, int, int), (slice, int, slice, slice, int, int, int)) $ClaimMaster$_fun_get_master_data((slice, int, slice, slice, int, int, int) $self) impure inline {
    var (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)) = $self;
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), $MasterData$_constructor_jettonWallet_interval_minter_admin_claimAmount_referralReward_boostReward($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward));
}

;;
;; Receivers of a Contract ClaimMaster
;;

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_Mint((slice, int, slice, slice, int, int, int) $self, (slice, slice, int, slice) $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($msg'user, $msg'referrer, $msg'interval, $msg'admin) = $msg;
    throw_unless(101, ( __tact_slice_eq_bits($self'minter, __tact_context_get_sender()) ));
    var ($init'code, $init'data) = $ClaimChild$_init_child(__tact_context_sys, my_address(), $msg'user);
    $global_send($SendParameters$_constructor_to_value_mode_code_data_body($global_contractAddress(($init'code, $init'data)), 0, 64, $init'code, $init'data, $Mint$_store_cell(($msg'user, $msg'referrer, $msg'interval, $msg'admin))));
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_Claim((slice, int, slice, slice, int, int, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($msg'amount, $msg'boost, $msg'user, $msg'referrer) = $msg;
    slice $expected = ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)~$ClaimMaster$_fun_get_user_address($msg'user);
    throw_unless(101, ( __tact_slice_eq_bits($expected, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_value_to_mode_body(50000000, __tact_not_null($self'jettonWallet), 0, $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_responseDestination_customPayload_forwardTonAmount_forwardPayload(0, (($self'claimAmount + ($msg'amount * $self'referralReward)) + ($msg'boost * $self'boostReward)), $msg'user, my_address(), null(), 1, null()))));
    if ((~ null?($msg'referrer))) {
        slice $refAddress = ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)~$ClaimMaster$_fun_get_user_address(__tact_not_null($msg'referrer));
        $global_send($SendParameters$_constructor_value_to_mode_body(0, $refAddress, 64, $AddReferral$_store_cell($AddReferral$_constructor_from_to($msg'user, __tact_not_null($msg'referrer)))));
    }
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_AddReferral((slice, int, slice, slice, int, int, int) $self, (slice, slice) $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($msg'from, $msg'to) = $msg;
    slice $expected = ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)~$ClaimMaster$_fun_get_user_address($msg'from);
    throw_unless(101, ( __tact_slice_eq_bits($expected, __tact_context_get_sender()) ));
    slice $refAddress = ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)~$ClaimMaster$_fun_get_user_address($msg'to);
    $global_send($SendParameters$_constructor_value_to_mode_body(0, $refAddress, 64, $AddReferral$_store_cell(($msg'from, $msg'to))));
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_MasterConfig((slice, int, slice, slice, int, int, int) $self, (slice, int, int, int, int) $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($msg'jettonWallet, $msg'interval, $msg'claimAmount, $msg'referralReward, $msg'boostReward) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(101, ( (( __tact_slice_eq_bits($self'minter, $ctx'sender) )) ? (true) : (( __tact_slice_eq_bits($self'admin, $ctx'sender) )) ));
    $self'jettonWallet = $msg'jettonWallet;
    $self'interval = $msg'interval;
    $self'claimAmount = $msg'claimAmount;
    $self'referralReward = $msg'referralReward;
    $self'boostReward = $msg'boostReward;
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_ChangeMinter((slice, int, slice, slice, int, int, int) $self, (slice) $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($msg'newMinter) = $msg;
    throw_unless(101, ( __tact_slice_eq_bits($self'admin, __tact_context_get_sender()) ));
    $self'minter = $msg'newMinter;
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_CustomMessage((slice, int, slice, slice, int, int, int) $self, (slice, cell) $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($msg'to, $msg'payload) = $msg;
    throw_unless(101, ( __tact_slice_eq_bits($self'admin, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'to, 0, 64, $msg'payload));
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_TokenNotification((slice, int, slice, slice, int, int, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($msg'queryId, $msg'amount, $msg'from, $msg'forwardPayload) = $msg;
    throw_unless(101, ( __tact_slice_eq_bits_nullable_one($self'jettonWallet, __tact_context_get_sender()) ));
    slice $userContract = ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)~$ClaimMaster$_fun_get_user_address($msg'from);
    $global_send($SendParameters$_constructor_to_value_mode_body($userContract, 0, 64, $Boost$_store_cell($Boost$_constructor_amount(($msg'amount / 1000000000)))));
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) %$ClaimMaster$_internal_empty((slice, int, slice, slice, int, int, int) $self) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_OwnerWithdrawalTonRequest((slice, int, slice, slice, int, int, int) $self, tuple $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var $msg = $msg;
    throw_unless(1001, ( __tact_slice_eq_bits($self'admin, __tact_context_get_sender()) ));
    $global_send($SendParameters$_constructor_to_value_mode($self'admin, 0, (128 + 2)));
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_OwnerWithdrawalRequest((slice, int, slice, slice, int, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($msg'amount, $msg'jettonWallet) = $msg;
    throw_unless(1001, ( __tact_slice_eq_bits($self'admin, __tact_context_get_sender()) ));
    if ((~ null?($msg'jettonWallet))) {
        $global_send($SendParameters$_constructor_value_to_mode_body(65000000, $msg'jettonWallet, 0, $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_responseDestination_customPayload_forwardTonAmount_forwardPayload(0, $msg'amount, $self'admin, $self'admin, null(), 1, null()))));
    }
    $global_send($SendParameters$_constructor_to_value_mode($self'admin, 0, (128 + 2)));
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

(((slice, int, slice, slice, int, int, int)), ()) $ClaimMaster$_internal_binary_Deploy((slice, int, slice, slice, int, int, int) $self, (int) $deploy) impure inline {
    var ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward)~$ClaimMaster$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'jettonWallet, $self'interval, $self'minter, $self'admin, $self'claimAmount, $self'referralReward, $self'boostReward), ());
}

;;
;; Get methods of a Contract ClaimMaster
;;

_ %get_user_address(slice $$user) method_id(102784) {
    slice $user = __tact_verify_address($$user);
    var self = $ClaimMaster$_contract_load();
    var res = self~$ClaimMaster$_fun_get_user_address($user);
    return res;
}

_ %get_master_data() method_id(84263) {
    var self = $ClaimMaster$_contract_load();
    var res = self~$ClaimMaster$_fun_get_master_data();
    return $MasterData$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmbR1AVg8BgL7q3WvwEUTAqjJ6d1LrRsCG7s8FVmoqJLCY";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract ClaimMaster
;;

((slice, int, slice, slice, int, int, int), int) $ClaimMaster$_contract_router_internal((slice, int, slice, slice, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Mint message
    if (op == 1) {
        var msg = in_msg~$Mint$_load();
        self~$ClaimMaster$_internal_binary_Mint(msg);
        return (self, true);
    }
    
    ;; Receive Claim message
    if (op == 2) {
        var msg = in_msg~$Claim$_load();
        self~$ClaimMaster$_internal_binary_Claim(msg);
        return (self, true);
    }
    
    ;; Receive AddReferral message
    if (op == 3) {
        var msg = in_msg~$AddReferral$_load();
        self~$ClaimMaster$_internal_binary_AddReferral(msg);
        return (self, true);
    }
    
    ;; Receive MasterConfig message
    if (op == 8) {
        var msg = in_msg~$MasterConfig$_load();
        self~$ClaimMaster$_internal_binary_MasterConfig(msg);
        return (self, true);
    }
    
    ;; Receive ChangeMinter message
    if (op == 18) {
        var msg = in_msg~$ChangeMinter$_load();
        self~$ClaimMaster$_internal_binary_ChangeMinter(msg);
        return (self, true);
    }
    
    ;; Receive CustomMessage message
    if (op == 9) {
        var msg = in_msg~$CustomMessage$_load();
        self~$ClaimMaster$_internal_binary_CustomMessage(msg);
        return (self, true);
    }
    
    ;; Receive TokenNotification message
    if (op == 1935855772) {
        var msg = in_msg~$TokenNotification$_load();
        self~$ClaimMaster$_internal_binary_TokenNotification(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$ClaimMaster$_internal_empty();
        return (self, true);
    }
    
    ;; Receive OwnerWithdrawalTonRequest message
    if (op == 7) {
        var msg = in_msg~$OwnerWithdrawalTonRequest$_load();
        self~$ClaimMaster$_internal_binary_OwnerWithdrawalTonRequest(msg);
        return (self, true);
    }
    
    ;; Receive OwnerWithdrawalRequest message
    if (op == 6) {
        var msg = in_msg~$OwnerWithdrawalRequest$_load();
        self~$ClaimMaster$_internal_binary_OwnerWithdrawalRequest(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$ClaimMaster$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $ClaimMaster$_contract_load();
    
    ;; Handle operation
    int handled = self~$ClaimMaster$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $ClaimMaster$_contract_store(self);
}
